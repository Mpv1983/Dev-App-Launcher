{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA,WAAW,mBAAO,CAAC,kBAAM;AACzB,YAAY,iEAA8B;AAC1C,YAAY,mBAAO,CAAC,uFAAO;AAC3B,UAAU,qDAAuB;AACjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;;AAEA,UAAU,+HAAmC;AAC7C,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;AACjB,eAAe;;AAEf;AACA;AACA;;AAEA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qBAAqB;AAC3B;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,eAAe;AACf,cAAc;AACd,eAAe;AACf,qHAAgC;;AAEhC;AACA;AACA;;AAEA,aAAa;AACb,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA,EAAE,aAAa;AACf,EAAE,aAAa;AACf;AACA;AACA,kBAAkB,SAAS;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;AC7LA;AACA;AACA;AACA;;AAEA;AACA,EAAE,sIAAwC;AAC1C,EAAE;AACF,EAAE,gIAAqC;AACvC;;;;;;;;;;ACTA;AACA;AACA;;AAEA,UAAU,mBAAO,CAAC,gBAAK;AACvB,WAAW,mBAAO,CAAC,kBAAM;;AAEzB;AACA;AACA;AACA;AACA;;AAEA,UAAU,+HAAmC;AAC7C,YAAY;AACZ,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;;AAEjB;AACA;AACA;;AAEA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,uDAAuD,6DAA6D,oCAAoC;AACxJ;AACA;AACA,CAAC,IAAI;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,cAAI;AAC3B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,gBAAK;AAC7B;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;ACpOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9Ie,MAAMA,aAAa;EAC9BC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAC;IAC1B,IAAI,CAACD,SAAS,GAAGA,SAAS,CAAC,CAAC;IAC5B,IAAI,CAACC,MAAM,GAAGA,MAAM,CAAC,CAAC;EAC1B;AACJ;;;;;;;;;;;;;;;;ACLqD;AACrD,MAAMC,IAAI,GAAGC,gEAA6B;AAC1C,MAAMC,QAAQ,GAAGD,oEAAiC;AAEnC,MAAME,gBAAgB,CAAC;EACpCN,WAAWA,CAAA,EAAG,CAEd;EAEAO,cAAcA,CAACC,GAAG,EAAEC,mBAAmB,EAAE;IAEvC,IAAI,CAACD,GAAG,CAACE,IAAI,IAAI,CAACF,GAAG,CAACG,IAAI,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,4EAA4E,CAAC;MAC3F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","sources":["webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/index.js","webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/node_modules/debug/src/browser.js","webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/node_modules/debug/src/debug.js","webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/node_modules/debug/src/index.js","webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/node_modules/debug/src/node.js","webpack://dev-app-launcher/./node_modules/electron-squirrel-startup/node_modules/ms/index.js","webpack://dev-app-launcher/./src/models/response.js","webpack://dev-app-launcher/./src/services/main/AppRunnerService.js","webpack://dev-app-launcher/external node-commonjs \"child_process\"","webpack://dev-app-launcher/external node-commonjs \"electron\"","webpack://dev-app-launcher/external node-commonjs \"fs\"","webpack://dev-app-launcher/external node-commonjs \"net\"","webpack://dev-app-launcher/external node-commonjs \"os\"","webpack://dev-app-launcher/external node-commonjs \"path\"","webpack://dev-app-launcher/external node-commonjs \"tty\"","webpack://dev-app-launcher/external node-commonjs \"util\"","webpack://dev-app-launcher/webpack/bootstrap","webpack://dev-app-launcher/webpack/runtime/define property getters","webpack://dev-app-launcher/webpack/runtime/hasOwnProperty shorthand","webpack://dev-app-launcher/webpack/runtime/make namespace object","webpack://dev-app-launcher/webpack/runtime/compat","webpack://dev-app-launcher/./src/main.js"],"sourcesContent":["var path = require('path');\nvar spawn = require('child_process').spawn;\nvar debug = require('debug')('electron-squirrel-startup');\nvar app = require('electron').app;\nvar run = function (args, done) {\n  var updateExe = path.resolve(path.dirname(process.execPath), '..', 'Update.exe');\n  debug('Spawning `%s` with args `%s`', updateExe, args);\n  spawn(updateExe, args, {\n    detached: true\n  }).on('close', done);\n};\nvar check = function () {\n  if (process.platform === 'win32') {\n    var cmd = process.argv[1];\n    debug('processing squirrel command `%s`', cmd);\n    var target = path.basename(process.execPath);\n    if (cmd === '--squirrel-install' || cmd === '--squirrel-updated') {\n      run(['--createShortcut=' + target + ''], app.quit);\n      return true;\n    }\n    if (cmd === '--squirrel-uninstall') {\n      run(['--removeShortcut=' + target + ''], app.quit);\n      return true;\n    }\n    if (cmd === '--squirrel-obsolete') {\n      app.quit();\n      return true;\n    }\n  }\n  return false;\n};\nmodule.exports = check();","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||\n  // is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||\n  // is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||\n  // double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);\n  if (!useColors) return;\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit');\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch (e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch (e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}","/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0,\n    i;\n  for (i in namespace) {\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    args[0] = exports.coerce(args[0]);\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n  exports.names = [];\n  exports.skips = [];\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}","/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {\n    return k.toUpperCase();\n  });\n\n  // coerce string value into JS value\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);\n  obj[prop] = val;\n  return obj;\n}, {});\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nif (1 !== fd && 2 !== fd) {\n  util.deprecate(function () {}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();\n}\nvar stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);\n}\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nexports.formatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts).split('\\n').map(function (str) {\n    return str.trim();\n  }).join(' ');\n};\n\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */\n\nexports.formatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n  if (useColors) {\n    var c = this.color;\n    var prefix = '  \\u001b[3' + c + ';1m' + name + ' ' + '\\u001b[0m';\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push('\\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];\n  }\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(util, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream(fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, {\n        autoClose: false\n      });\n      stream._type = 'fs';\n      break;\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n  stream._isStdio = true;\n  return stream;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  var keys = Object.keys(exports.inspectOpts);\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}","export default class ResponseModel{\r\n    constructor(isSuccess, result){\r\n        this.isSuccess = isSuccess; // boolean\r\n        this.result = result; // any\r\n    }\r\n}","import ResponseModel from '../../models/response.js';\r\nconst exec = require('child_process').exec;\r\nconst execSync = require('child_process').execSync;\r\n\r\nexport default class AppRunnerService {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  startDotNetApp(app, publishDotNetOutput) {\r\n\r\n    if (!app.path || !app.port) {\r\n      console.error('Please provide both the path/name of the .NET project and the port number.');\r\n      return;\r\n    }\r\n\r\n    var dotnetProcess = exec(`dotnet run --project ${app.path} --urls http://localhost:${app.port}`);\r\n\r\n    dotnetProcess.stdout.on('data', (data) => {\r\n      const dataToSend = { message: { data:data, port:app.port } };\r\n      publishDotNetOutput(dataToSend);\r\n      console.log(`.NET app stdout: ${data}`);\r\n    });\r\n\r\n    dotnetProcess.stderr.on('data', (data) => {\r\n      console.error(`.NET app stderr: ${data}`);\r\n    });\r\n\r\n    dotnetProcess.on('close', (code) => {\r\n      console.log(`.NET app process exited with code ${code}`);\r\n    });\r\n  }\r\n\r\n  stopDotNetApp(app) {\r\n\r\n    var pid = this.getProcessId(app)\r\n\r\n    if (pid != undefined) {\r\n\r\n      exec(`taskkill /F /PID ${pid}`);\r\n      console.log(`.NET app ${app.name} stopped.`);\r\n\r\n    } \r\n    //  TODO: handle process not found, this might be because the executable name does not match the process running\r\n  }\r\n\r\n  getProcessId(app) {\r\n\r\n    var buffer = execSync(`netstat -aon | findstr :${app.port}`, { timeout: 1000 });\r\n    var netstatResults = buffer.toString().split('\\n');\r\n    var processId = undefined;\r\n\r\n    for (const item of netstatResults){\r\n      var netstats = item.split(' ');\r\n      var pid = netstats[netstats.length - 1];\r\n      var executable = this.getExecutableNameByPID(pid);\r\n\r\n      if(executable == app.executable){\r\n        processId = pid;\r\n        break;\r\n      }\r\n\r\n    };\r\n\r\n    return processId;\r\n  }\r\n\r\n  getExecutableNameByPID(pid) {\r\n\r\n    try {\r\n      const output = execSync(`tasklist /FI \"PID eq ${pid}\" /FO CSV`);\r\n      const lines = output.toString().split('\\n');\r\n\r\n      if (lines.length > 1) {\r\n        const info = lines[1].split('\",\"');\r\n        return info[0].replace('\"', ''); // Extracting the executable name\r\n      }\r\n\r\n      console.log('Process not found');\r\n    } catch (error) {\r\n      console.log('Error occurred', error);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"tty\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/native_modules/\";","const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst { version } = require('os');\r\nconst path = require('path');\r\n\r\n\r\nimport AppRunnerService from './services/main/AppRunnerService.js';\r\nconst appRunnerService= new AppRunnerService();\r\n\r\n\r\n\r\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\r\nif (require('electron-squirrel-startup')) {\r\n  app.quit();\r\n}\r\n\r\nlet mainWindow;\r\nconst createWindow = () => {\r\n  // Create the browser window.\r\n  mainWindow = new BrowserWindow({\r\n    width: 800,\r\n    height: 600,\r\n    webPreferences: {\r\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\r\n      contextIsolation: true,\r\n      nodeIntegration: true // Ensure node integration is enabled\r\n    },\r\n  });\r\n\r\n  // and load the index.html of the app.\r\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\r\n\r\n  // Open the DevTools.\r\n  mainWindow.webContents.openDevTools();\r\n};\r\n\r\n\r\nipcMain.handle('startDotNetApp', async (event, args) => {\r\n  appRunnerService.startDotNetApp(args.app, sender);\r\n  return;\r\n});\r\n\r\nfunction sender(msg){\r\n  mainWindow.webContents.send('publishDotNetOutput', msg);\r\n}\r\n\r\nipcMain.handle('stopDotNetApp', async (event, args) => {\r\n  await appRunnerService.stopDotNetApp(args.app);\r\n  return;\r\n});\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', createWindow);\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and import them here.\r\n"],"names":["ResponseModel","constructor","isSuccess","result","exec","require","execSync","AppRunnerService","startDotNetApp","app","publishDotNetOutput","path","port","console","error","dotnetProcess","stdout","on","data","dataToSend","message","log","stderr","code","stopDotNetApp","pid","getProcessId","undefined","name","buffer","timeout","netstatResults","toString","split","processId","item","netstats","length","executable","getExecutableNameByPID","output","lines","info","replace","BrowserWindow","ipcMain","version","appRunnerService","quit","mainWindow","createWindow","width","height","webPreferences","preload","MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY","contextIsolation","nodeIntegration","loadURL","MAIN_WINDOW_WEBPACK_ENTRY","webContents","openDevTools","handle","event","args","sender","msg","send","process","platform","getAllWindows"],"sourceRoot":""}